params {
    name = false
    project = false
    email = false
    plaintext_email = false
    version = "1.0.0"
    reads = "$baseDir/fastq/*_{R1,R2,1,2}*.fastq{,.gz}" // Matches a wider range of naming conventions
    outdir = "results"

    overwrite = false

    reporting_threshold = 1
    consensus_pct = 20
    length_cutoff = 100
    score_cutoff = 30
    min_variant_qual = 30
    min_dp = 100
    min_ac = 5
    min_freq = 0.01

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    enabled = true
    overwrite = params.overwrite
    file = "${params.outdir}/pipeline_info/QuasiFlow2_timeline.html"
}
report {
    enabled = true
    overwrite = params.overwrite
    file = "${params.outdir}/pipeline_info/QuasiFlow2_report.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/QuasiFlow2_trace.txt"
    overwrite = true
}
dag {
    enabled = true
    overwrite = params.overwrite
    file = "${params.outdir}/pipeline_info/QuasiFlow2_DAG.html"
}
manifest {
    homePage = ''
    description = 'Nextflow pipeline for analysis of NGS-based HIV drug resistance Data'
    mainScript = 'quasiflow2.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}